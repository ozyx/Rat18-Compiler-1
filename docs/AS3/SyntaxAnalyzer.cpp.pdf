%PDF-1.3
%‚„œ”
2 0 obj
<<
/Length 4495
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(1)]TJ
/TT4 1 Tf
7 0 0 7 46.8 793 Tm
[(1:)-599.8(#include "SyntaxAnalyzer.h")]TJ
0 -1.1429 TD
(2:)Tj
T*
[(3:)-599.8(SyntaxAnalyzer::SyntaxAnalyzer\(const std::vector<Lexer::Token> &tokens, std::ofstream &output, bool print\) : tokens\(toke)]TJ
-2.5429 -1.1429 TD
(ns\), it\(tokens.begin\(\)\), currentToken\(*\(it\)\), output\(output\), save\(nullptr\))Tj
2.5429 -1.1429 TD
[(4:)-599.8({)]TJ
T*
[(5:)-599.8(        this->print = print;)]TJ
T*
[(6:)-599.8(        this->save = new Lexer::Token\(\);)]TJ
T*
[(7:)-599.8(        this->errCount = 0;)]TJ
T*
[(8:)-599.8(        this->isDeclaration = false;)]TJ
T*
[(9:)-599.8(})]TJ
-0.6 -1.1429 TD
(10:)Tj
T*
[(11:)-599.7(SyntaxAnalyzer::òSyntaxAnalyzer\(\))]TJ
T*
[(12:)-599.7({)]TJ
T*
[(13:)-599.7(})]TJ
T*
(14:)Tj
T*
[(15:)-599.7(void SyntaxAnalyzer::error\(ErrorType errorType, int lineNumber, std::string expected\))]TJ
T*
[(16:)-599.7({)]TJ
T*
[(17:)-599.7(        errCount++;)]TJ
T*
[(18:)-599.7(        err << "[ERR] \(Line " << lineNumber << "\) ";)]TJ
T*
[(19:)-599.7(        switch \(errorType\))]TJ
T*
[(20:)-599.7(        {)]TJ
T*
[(21:)-599.7(        case TYPE_MISMATCH:)]TJ
T*
[(22:)-599.7(        {)]TJ
T*
[(23:)-599.7(                err << "TYPE MISMATCH";)]TJ
T*
[(24:)-599.7(                if \(expected != ""\))]TJ
T*
[(25:)-599.7(                {)]TJ
T*
[(26:)-599.7(                        err << ". Expected \\"" << expected << "\\"";)]TJ
T*
[(27:)-599.7(                })]TJ
T*
[(28:)-599.7(                break;)]TJ
T*
[(29:)-599.7(        })]TJ
T*
[(30:)-599.7(        case DUPLICATE_SYMBOL:)]TJ
T*
[(31:)-599.7(        {)]TJ
T*
[(32:)-599.7(                err << "DUPLICATE SYMBOL";)]TJ
T*
[(33:)-599.7(                if \(expected != ""\))]TJ
T*
[(34:)-599.7(                {)]TJ
T*
[(35:)-599.7(                        err << " \\"" << expected << "\\"";)]TJ
T*
[(36:)-599.7(                })]TJ
T*
[(37:)-599.7(                break;)]TJ
T*
[(38:)-599.7(        })]TJ
T*
[(39:)-599.7(        case UNDECLARED_VARIABLE:)]TJ
T*
[(40:)-599.7(        {)]TJ
T*
[(41:)-599.7(                err << "UNDECLARED VARIABLE";)]TJ
T*
[(42:)-599.7(                if \(expected != ""\))]TJ
T*
[(43:)-599.7(                {)]TJ
T*
[(44:)-599.7(                        err << " \\"" << expected << "\\"";)]TJ
T*
[(45:)-599.7(                })]TJ
T*
(46:)Tj
T*
[(47:)-599.7(                break;)]TJ
T*
[(48:)-599.7(        })]TJ
T*
[(49:)-599.7(        })]TJ
T*
[(50:)-599.7(        err << std::endl;)]TJ
T*
[(51:)-599.7(})]TJ
T*
(52:)Tj
T*
[(53:)-599.7(/**)]TJ
T*
[(54:)-599.7( * Get the next token in the list of tokens)]TJ
T*
[(55:)-599.7( * Increments iterator to current token)]TJ
T*
[(56:)-599.7( */)]TJ
T*
[(57:)-599.7(void SyntaxAnalyzer::getNextToken\(\))]TJ
T*
[(58:)-599.7({)]TJ
T*
[(59:)-599.7(        // Increment iterator)]TJ
T*
[(60:)-599.7(        ++it;)]TJ
T*
(61:)Tj
T*
[(62:)-599.7(        if \(it == this->tokens.end\(\)\))]TJ
T*
[(63:)-599.7(        {)]TJ
T*
[(64:)-599.7(                --it;)]TJ
T*
[(65:)-599.7(                throw SyntaxError\("Unexpected end of file", currentToken.lineNumber\);)]TJ
T*
[(66:)-599.7(        })]TJ
T*
(67:)Tj
T*
[(68:)-599.7(        this->currentToken = *\(it\);)]TJ
T*
(69:)Tj
T*
[(70:)-599.7(        if \(print\))]TJ
T*
[(71:)-599.7(        {)]TJ
T*
[(72:)-599.7(                printCurrentToken\(\);)]TJ
T*
[(73:)-599.7(        })]TJ
T*
(74:)Tj
T*
[(75:)-599.7(        if \(this->currentToken.token == "Illegal"\))]TJ
T*
[(76:)-599.7(        {)]TJ
T*
[(77:)-599.7(                throw SyntaxError\("Illegal symbol \\í" + this->currentToken.lexeme + "\\í", this->currentToken.lineNumber\))]TJ
-1.9429 -1.1429 TD
(;)Tj
1.9429 -1.1429 TD
[(78:)-599.7(        })]TJ
T*
[(79:)-599.7(})]TJ
T*
(80:)Tj
T*
[(81:)-599.7(// The root of the top-down parser)]TJ
T*
[(82:)-599.7(void SyntaxAnalyzer::Rat18F\(\))]TJ
T*
[(83:)-599.7({)]TJ
T*
[(84:)-599.7(        if \(print\))]TJ
T*
[(85:)-599.7(        {)]TJ
T*
[(86:)-599.7(                printCurrentToken\(\);)]TJ
T*
[(87:)-599.7(                output << "\\t<Rat18F> -> <Opt Function Definitions> $$ <Opt Declaration List> <Statement List>" << std::)]TJ
-1.9429 -1.1429 TD
(endl;)Tj
1.9429 -1.1429 TD
[(88:)-599.7(        })]TJ
T*
(89:)Tj
T*
[(90:)-599.7(        OptFunctionDefinitions\(\);)]TJ
T*
(91:)Tj
T*
[(92:)-599.7(        if \(currentToken.lexeme == "$$"\))]TJ
T*
[(93:)-599.7(        {)]TJ
ET
endstream
endobj
3 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
9 0 obj
<<
/Length 4232
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(2)]TJ
/TT4 1 Tf
7 0 0 7 42.6 793 Tm
[(94:)-599.7(                getNextToken\(\);)]TJ
0 -1.1429 TD
[(95:)-599.7(                OptDeclarationList\(\);)]TJ
T*
[(96:)-599.7(                StatementList\(\);)]TJ
T*
[(97:)-599.7(        })]TJ
T*
(98:)Tj
T*
[(99:)-599.7(        if \(currentToken.lexeme != "$$"\))]TJ
-0.6 -1.1429 TD
[(100:)-599.6(        {)]TJ
T*
[(101:)-599.6(                throw SyntaxError\("Expected í$$í.", currentToken.lineNumber\);)]TJ
T*
[(102:)-599.6(        })]TJ
T*
[(103:)-599.6(})]TJ
T*
(104:)Tj
T*
[(105:)-599.6(void SyntaxAnalyzer::Parameter\(\))]TJ
T*
[(106:)-599.6({)]TJ
T*
[(107:)-599.6(        if \(print\))]TJ
T*
[(108:)-599.6(        {)]TJ
T*
[(109:)-599.6(                output << "\\t<Parameter> -> <IDs> : <Qualifier>" << std::endl;)]TJ
T*
[(110:)-599.6(        })]TJ
T*
(111:)Tj
T*
[(112:)-599.6(        IDs\(\);)]TJ
T*
(113:)Tj
T*
[(114:)-599.6(        if \(currentToken.lexeme != ":"\))]TJ
T*
[(115:)-599.6(        {)]TJ
T*
[(116:)-599.6(                throw SyntaxError\("Expected í:í", currentToken.lineNumber\);)]TJ
T*
[(117:)-599.6(        })]TJ
T*
(118:)Tj
T*
[(119:)-599.6(        getNextToken\(\);)]TJ
T*
[(120:)-599.6(        Qualifier\(\);)]TJ
T*
[(121:)-599.6(})]TJ
T*
(122:)Tj
T*
[(123:)-599.6(void SyntaxAnalyzer::Function\(\))]TJ
T*
[(124:)-599.6({)]TJ
T*
[(125:)-599.6(        if \(print\))]TJ
T*
[(126:)-599.6(        {)]TJ
T*
[(127:)-599.6(                output << "\\t<Function> ->  function <Identifier> \( <Opt Parameter List> \) <Opt Declaration List> <Body>)]TJ
-1.3429 -1.1429 TD
(" << std::endl;)Tj
1.3429 -1.1429 TD
[(128:)-599.6(        })]TJ
T*
(129:)Tj
T*
[(130:)-599.6(        Identifier\(\);)]TJ
T*
(131:)Tj
T*
[(132:)-599.6(        getNextToken\(\);)]TJ
T*
[(133:)-599.6(        if \(currentToken.lexeme != "\("\))]TJ
T*
[(134:)-599.6(        {)]TJ
T*
[(135:)-599.6(                throw SyntaxError\("Expected í\(í", currentToken.lineNumber\);)]TJ
T*
[(136:)-599.6(        })]TJ
T*
(137:)Tj
T*
[(138:)-599.6(        getNextToken\(\);)]TJ
T*
(139:)Tj
T*
[(140:)-599.6(        OptParameterList\(\);)]TJ
T*
(141:)Tj
T*
[(142:)-599.6(        if \(currentToken.lexeme != "\)"\))]TJ
T*
[(143:)-599.6(        {)]TJ
T*
[(144:)-599.6(                throw SyntaxError\("Expected í\)í", currentToken.lineNumber\);)]TJ
T*
[(145:)-599.6(        })]TJ
T*
(146:)Tj
T*
[(147:)-599.6(        getNextToken\(\);)]TJ
T*
[(148:)-599.6(        OptDeclarationList\(\);)]TJ
T*
[(149:)-599.6(        Body\(\);)]TJ
T*
[(150:)-599.6(})]TJ
T*
(151:)Tj
T*
[(152:)-599.6(void SyntaxAnalyzer::OptFunctionDefinitions\(\))]TJ
T*
[(153:)-599.6({)]TJ
T*
[(154:)-599.6(        if \(print\))]TJ
T*
[(155:)-599.6(        {)]TJ
T*
[(156:)-599.6(                output << "\\t<Opt Function Definitions> ->  <Function Definitions> | <Empty>" << std::endl;)]TJ
T*
[(157:)-599.6(        })]TJ
T*
(158:)Tj
T*
[(159:)-599.6(        if \(currentToken.lexeme == "function"\))]TJ
T*
[(160:)-599.6(        {)]TJ
T*
[(161:)-599.6(                getNextToken\(\);)]TJ
T*
[(162:)-599.6(                FunctionDefinitions\(\);)]TJ
T*
[(163:)-599.6(        })]TJ
T*
[(164:)-599.6(        else)]TJ
T*
[(165:)-599.6(        {)]TJ
T*
[(166:)-599.6(                Empty\(\);)]TJ
T*
[(167:)-599.6(        })]TJ
T*
[(168:)-599.6(})]TJ
T*
(169:)Tj
T*
[(170:)-599.6(void SyntaxAnalyzer::OptDeclarationList\(\))]TJ
T*
[(171:)-599.6({)]TJ
T*
[(172:)-599.6(        if \(print\))]TJ
T*
[(173:)-599.6(        {)]TJ
T*
[(174:)-599.6(                output << "\\t<Opt Declaration List> -> <Declaration List> | <Empty>" << std::endl;)]TJ
T*
[(175:)-599.6(        })]TJ
T*
(176:)Tj
T*
[(177:)-599.6(        if \(currentToken.lexeme == "real" | currentToken.lexeme == "boolean" | currentToken.lexeme == "int"\))]TJ
T*
[(178:)-599.6(        {)]TJ
T*
[(179:)-599.6(                DeclarationList\(\);)]TJ
T*
[(180:)-599.6(        })]TJ
T*
[(181:)-599.6(        else)]TJ
T*
[(182:)-599.6(        {)]TJ
T*
[(183:)-599.6(                Empty\(\);)]TJ
T*
[(184:)-599.6(        })]TJ
T*
[(185:)-599.6(})]TJ
T*
(186:)Tj
T*
[(187:)-599.6(void SyntaxAnalyzer::DeclarationList\(\))]TJ
T*
[(188:)-599.6({)]TJ
ET
endstream
endobj
10 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
12 0 obj
<<
/Length 4371
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(3)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(189:)-599.6(        if \(print\))]TJ
0 -1.1429 TD
[(190:)-599.6(        {)]TJ
T*
[(191:)-599.6(                output << "\\t<Declaration List> -> <Declaration>; | <Declaration>; <Declaration List>\\n";)]TJ
T*
[(192:)-599.6(        })]TJ
T*
(193:)Tj
T*
[(194:)-599.6(        // Save variable type)]TJ
T*
[(195:)-599.6(        savedType = new std::string\(currentToken.lexeme\);)]TJ
T*
(196:)Tj
T*
[(197:)-599.6(        this->isDeclaration = true;)]TJ
T*
(198:)Tj
T*
[(199:)-599.6(        Declaration\(\);)]TJ
T*
(200:)Tj
T*
[(201:)-599.6(        if \(currentToken.lexeme == ";"\))]TJ
T*
[(202:)-599.6(        {)]TJ
T*
[(203:)-599.6(                // Done with declaration, pop type stack)]TJ
T*
[(204:)-599.6(                symbolTable.pop_typestack\(\);)]TJ
T*
(205:)Tj
T*
[(206:)-599.6(                getNextToken\(\);)]TJ
T*
[(207:)-599.6(                if \(currentToken.lexeme == "real" | currentToken.lexeme == "boolean" | currentToken.lexeme == "int"\))]TJ
T*
[(208:)-599.6(                {)]TJ
T*
[(209:)-599.6(                        DeclarationList\(\);)]TJ
T*
[(210:)-599.6(                })]TJ
T*
[(211:)-599.6(        })]TJ
T*
(212:)Tj
T*
[(213:)-599.6(        this->isDeclaration = false;)]TJ
T*
[(214:)-599.6(})]TJ
T*
(215:)Tj
T*
[(216:)-599.6(void SyntaxAnalyzer::Declaration\(\))]TJ
T*
[(217:)-599.6({)]TJ
T*
[(218:)-599.6(        if \(print\))]TJ
T*
[(219:)-599.6(        {)]TJ
T*
[(220:)-599.6(                output << "\\t<Declaration> -> <Qualifier> <IDs>" << std::endl;)]TJ
T*
[(221:)-599.6(        })]TJ
T*
(222:)Tj
T*
[(223:)-599.6(        Qualifier\(\);)]TJ
T*
[(224:)-599.6(        getNextToken\(\);)]TJ
T*
(225:)Tj
T*
[(226:)-599.6(        if \(currentToken.token == "Identifier"\))]TJ
T*
[(227:)-599.6(        {)]TJ
T*
[(228:)-599.6(                IDs\(\);)]TJ
T*
[(229:)-599.6(        })]TJ
T*
[(230:)-599.6(})]TJ
T*
(231:)Tj
T*
[(232:)-599.6(void SyntaxAnalyzer::Qualifier\(\))]TJ
T*
[(233:)-599.6({)]TJ
T*
[(234:)-599.6(        if \(print\))]TJ
T*
[(235:)-599.6(        {)]TJ
T*
[(236:)-599.6(                output << "\\t<Qualifier> ->  int | boolean | real" << std::endl;)]TJ
T*
[(237:)-599.6(        })]TJ
T*
[(238:)-599.6(})]TJ
T*
(239:)Tj
T*
[(240:)-599.6(void SyntaxAnalyzer::IDs\(\))]TJ
T*
[(241:)-599.6({)]TJ
T*
[(242:)-599.6(        if \(print\))]TJ
T*
[(243:)-599.6(        {)]TJ
T*
[(244:)-599.6(                output << "\\t<IDs> -> <Identifier> | <Identifier>, <IDs>" << std::endl;)]TJ
T*
[(245:)-599.6(        })]TJ
T*
(246:)Tj
T*
[(247:)-599.6(        if \(isDeclaration\) {)]TJ
T*
[(248:)-599.6(                if \(!symbolTable.lookup\(currentToken\)\))]TJ
T*
[(249:)-599.6(                {)]TJ
T*
[(250:)-599.6(                        symbolTable.insert\(currentToken, *savedType\);)]TJ
T*
[(251:)-599.6(                })]TJ
T*
[(252:)-599.6(                else)]TJ
T*
[(253:)-599.6(                {)]TJ
T*
[(254:)-599.6(                        error\(DUPLICATE_SYMBOL, currentToken.lineNumber, currentToken.lexeme\);)]TJ
T*
[(255:)-599.6(                })]TJ
T*
[(256:)-599.6(        })]TJ
T*
(257:)Tj
T*
[(258:)-599.6(        Identifier\(\);)]TJ
T*
[(259:)-599.6(        getNextToken\(\);)]TJ
T*
(260:)Tj
T*
[(261:)-599.6(        if \(currentToken.lexeme == ","\))]TJ
T*
[(262:)-599.6(        {)]TJ
T*
[(263:)-599.6(                getNextToken\(\);)]TJ
T*
[(264:)-599.6(                if \(currentToken.token == "Identifier"\))]TJ
T*
[(265:)-599.6(                {)]TJ
T*
[(266:)-599.6(                        IDs\(\);)]TJ
T*
[(267:)-599.6(                })]TJ
T*
[(268:)-599.6(                else)]TJ
T*
[(269:)-599.6(                {)]TJ
T*
[(270:)-599.6(                        throw SyntaxError\("Expected identifier", currentToken.lineNumber\);)]TJ
T*
[(271:)-599.6(                })]TJ
T*
[(272:)-599.6(        })]TJ
T*
[(273:)-599.6(})]TJ
T*
(274:)Tj
T*
[(275:)-599.6(void SyntaxAnalyzer::Identifier\(\))]TJ
T*
[(276:)-599.6({)]TJ
T*
[(277:)-599.6(        if \(print\))]TJ
T*
[(278:)-599.6(        {)]TJ
T*
[(279:)-599.6(                output << "\\t<Identifier>" << std::endl;)]TJ
T*
[(280:)-599.6(        })]TJ
T*
[(281:)-599.6(})]TJ
T*
(282:)Tj
T*
[(283:)-599.6(void SyntaxAnalyzer::StatementList\(\))]TJ
T*
[(284:)-599.6({)]TJ
ET
endstream
endobj
13 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
15 0 obj
<<
/Length 4629
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(4)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(285:)-599.6(        if \(print\))]TJ
0 -1.1429 TD
[(286:)-599.6(        {)]TJ
T*
[(287:)-599.6(                output << "\\t<Statement List> -> <Statement> | <Statement> <Statement List>" << std::endl;)]TJ
T*
[(288:)-599.6(        })]TJ
T*
(289:)Tj
T*
[(290:)-599.6(        Statement\(\);)]TJ
T*
(291:)Tj
T*
[(292:)-599.6(        if \(currentToken.lexeme == "get" | currentToken.lexeme == "put" | currentToken.lexeme == "while" | currentToken.)]TJ
-1.3429 -1.1429 TD
(lexeme == "if" |)Tj
1.3429 -1.1429 TD
[(293:)-599.6(                currentToken.lexeme == "return" | currentToken.token == "Identifier"\))]TJ
T*
[(294:)-599.6(        {)]TJ
T*
[(295:)-599.6(                StatementList\(\);)]TJ
T*
[(296:)-599.6(        })]TJ
T*
[(297:)-599.6(})]TJ
T*
(298:)Tj
T*
[(299:)-599.6(void SyntaxAnalyzer::Statement\(\))]TJ
T*
[(300:)-599.6({)]TJ
T*
[(301:)-599.6(        if \(print\))]TJ
T*
[(302:)-599.6(        {)]TJ
T*
[(303:)-599.6(                output << "\\t<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>" << std)]TJ
-1.3429 -1.1429 TD
(::endl;)Tj
1.3429 -1.1429 TD
[(304:)-599.6(        })]TJ
T*
(305:)Tj
T*
[(306:)-599.6(        if \(currentToken.lexeme == "{"\))]TJ
T*
[(307:)-599.6(        {)]TJ
T*
[(308:)-599.6(                getNextToken\(\);)]TJ
T*
[(309:)-599.6(                Compound\(\);)]TJ
T*
[(310:)-599.6(        })]TJ
T*
[(311:)-599.6(        else if \(currentToken.token == "Identifier"\))]TJ
T*
[(312:)-599.6(        {)]TJ
T*
[(313:)-599.6(                Assign\(\);)]TJ
T*
[(314:)-599.6(        })]TJ
T*
[(315:)-599.6(        else if \(currentToken.lexeme == "if"\))]TJ
T*
[(316:)-599.6(        {)]TJ
T*
[(317:)-599.6(                getNextToken\(\);)]TJ
T*
[(318:)-599.6(                If\(\);)]TJ
T*
[(319:)-599.6(        })]TJ
T*
[(320:)-599.6(        else if \(currentToken.lexeme == "return"\))]TJ
T*
[(321:)-599.6(        {)]TJ
T*
[(322:)-599.6(                getNextToken\(\);)]TJ
T*
[(323:)-599.6(                Return\(\);)]TJ
T*
[(324:)-599.6(        })]TJ
T*
[(325:)-599.6(        else if \(currentToken.lexeme == "put"\))]TJ
T*
[(326:)-599.6(        {)]TJ
T*
[(327:)-599.6(                getNextToken\(\);)]TJ
T*
[(328:)-599.6(                Print\(\);)]TJ
T*
[(329:)-599.6(        })]TJ
T*
[(330:)-599.6(        else if \(currentToken.lexeme == "get"\))]TJ
T*
[(331:)-599.6(        {)]TJ
T*
[(332:)-599.6(                getNextToken\(\);)]TJ
T*
[(333:)-599.6(                Scan\(\);)]TJ
T*
[(334:)-599.6(        })]TJ
T*
[(335:)-599.6(        else if \(currentToken.lexeme == "while"\))]TJ
T*
[(336:)-599.6(        {)]TJ
T*
[(337:)-599.6(                getNextToken\(\);)]TJ
T*
[(338:)-599.6(                While\(\);)]TJ
T*
[(339:)-599.6(        })]TJ
T*
[(340:)-599.6(        else)]TJ
T*
[(341:)-599.6(        {)]TJ
T*
[(342:)-599.6(                throw SyntaxError\("Expected í{í, identifier or keyword", currentToken.lineNumber\);)]TJ
T*
[(343:)-599.6(        })]TJ
T*
[(344:)-599.6(})]TJ
T*
(345:)Tj
T*
[(346:)-599.6(void SyntaxAnalyzer::Compound\(\))]TJ
T*
[(347:)-599.6({)]TJ
T*
[(348:)-599.6(        if \(print\))]TJ
T*
[(349:)-599.6(        {)]TJ
T*
[(350:)-599.6(                output << "\\t<Compound> -> { <Statement List> }" << std::endl;)]TJ
T*
[(351:)-599.6(        })]TJ
T*
(352:)Tj
T*
[(353:)-599.6(        StatementList\(\);)]TJ
T*
(354:)Tj
T*
[(355:)-599.6(        if \(currentToken.lexeme != "}"\))]TJ
T*
[(356:)-599.6(        {)]TJ
T*
[(357:)-599.6(                throw SyntaxError\("Expected í}í", currentToken.lineNumber\);)]TJ
T*
[(358:)-599.6(        })]TJ
T*
(359:)Tj
T*
[(360:)-599.6(        getNextToken\(\);)]TJ
T*
[(361:)-599.6(})]TJ
T*
(362:)Tj
T*
[(363:)-599.6(void SyntaxAnalyzer::Assign\(\))]TJ
T*
[(364:)-599.6({)]TJ
T*
[(365:)-599.6(        if \(print\))]TJ
T*
[(366:)-599.6(        {)]TJ
T*
[(367:)-599.6(                output << "\\t<Assign> -> <Identifier> = <Expression>;" << std::endl;)]TJ
T*
[(368:)-599.6(        })]TJ
T*
(369:)Tj
T*
[(370:)-599.6(        Identifier\(\);)]TJ
T*
(371:)Tj
T*
[(372:)-599.6(        // Save the value of the current token to gen instruction later)]TJ
T*
[(373:)-599.6(        *save = currentToken;)]TJ
T*
[(374:)-599.6(        std::string type = symbolTable.get_type\(*save\);)]TJ
T*
[(375:)-599.6(        if \(type == ""\))]TJ
T*
[(376:)-599.6(        {)]TJ
T*
[(377:)-599.6(                error\(UNDECLARED_VARIABLE, currentToken.lineNumber, currentToken.lexeme\);)]TJ
T*
[(378:)-599.6(        })]TJ
ET
endstream
endobj
16 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
18 0 obj
<<
/Length 4119
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(5)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(379:)-599.6(        else)]TJ
0 -1.1429 TD
[(380:)-599.6(        {)]TJ
T*
[(381:)-599.6(                symbolTable.push_typestack\(symbolTable.get_type\(*save\)\);)]TJ
T*
[(382:)-599.6(        })]TJ
T*
(383:)Tj
T*
[(384:)-599.6(        getNextToken\(\);)]TJ
T*
(385:)Tj
T*
[(386:)-599.6(        if \(currentToken.lexeme != "="\))]TJ
T*
[(387:)-599.6(        {)]TJ
T*
[(388:)-599.6(                throw SyntaxError\("Expected í=í", currentToken.lineNumber\);)]TJ
T*
[(389:)-599.6(        })]TJ
T*
(390:)Tj
T*
[(391:)-599.6(        getNextToken\(\);)]TJ
T*
[(392:)-599.6(        Expression\(\);)]TJ
T*
(393:)Tj
T*
[(394:)-599.6(        symbolTable.gen_instr\("POPM", symbolTable.get_address\(*save\)\);)]TJ
T*
(395:)Tj
T*
[(396:)-599.6(        if \(currentToken.lexeme != ";"\))]TJ
T*
[(397:)-599.6(        {)]TJ
T*
[(398:)-599.6(                throw SyntaxError\("Expected í;í", currentToken.lineNumber\);)]TJ
T*
[(399:)-599.6(        })]TJ
T*
(400:)Tj
T*
[(401:)-599.6(        symbolTable.pop_typestack\(\);)]TJ
T*
(402:)Tj
T*
[(403:)-599.6(        getNextToken\(\);)]TJ
T*
[(404:)-599.6(})]TJ
T*
(405:)Tj
T*
[(406:)-599.6(void SyntaxAnalyzer::Expression\(\))]TJ
T*
[(407:)-599.6({)]TJ
T*
[(408:)-599.6(        if \(print\))]TJ
T*
[(409:)-599.6(        {)]TJ
T*
[(410:)-599.6(                output << "\\t<Expression> -> <Term> <ExpressionPrime>" << std::endl;)]TJ
T*
[(411:)-599.6(        })]TJ
T*
(412:)Tj
T*
[(413:)-599.6(        Term\(\);)]TJ
T*
[(414:)-599.6(        ExpressionPrime\(\);)]TJ
T*
[(415:)-599.6(})]TJ
T*
(416:)Tj
T*
[(417:)-599.6(void SyntaxAnalyzer::ExpressionPrime\(\))]TJ
T*
[(418:)-599.6({)]TJ
T*
[(419:)-599.6(        if \(print\))]TJ
T*
[(420:)-599.6(        {)]TJ
T*
[(421:)-599.6(                output << "\\t<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>" << )]TJ
-1.3429 -1.1429 TD
(std::endl;)Tj
1.3429 -1.1429 TD
[(422:)-599.6(        })]TJ
T*
(423:)Tj
T*
[(424:)-599.6(        if \(currentToken.lexeme == "+" | currentToken.lexeme == "-"\))]TJ
T*
[(425:)-599.6(        {)]TJ
T*
[(426:)-599.6(                std::string op = currentToken.lexeme;)]TJ
T*
[(427:)-599.6(                getNextToken\(\);)]TJ
T*
(428:)Tj
T*
[(429:)-599.6(                Term\(\);)]TJ
T*
(430:)Tj
T*
[(431:)-599.6(                if \(op == "+"\))]TJ
T*
[(432:)-599.6(                {)]TJ
T*
[(433:)-599.6(                        symbolTable.gen_instr\("ADD", NIL\);)]TJ
T*
[(434:)-599.6(                })]TJ
T*
[(435:)-599.6(                else)]TJ
T*
[(436:)-599.6(                {)]TJ
T*
[(437:)-599.6(                        symbolTable.gen_instr\("SUB", NIL\);)]TJ
T*
[(438:)-599.6(                })]TJ
T*
[(439:)-599.6(                ExpressionPrime\(\);)]TJ
T*
[(440:)-599.6(        })]TJ
T*
[(441:)-599.6(        else)]TJ
T*
[(442:)-599.6(        {)]TJ
T*
[(443:)-599.6(                Empty\(\);)]TJ
T*
[(444:)-599.6(        })]TJ
T*
[(445:)-599.6(})]TJ
T*
(446:)Tj
T*
[(447:)-599.6(void SyntaxAnalyzer::Term\(\))]TJ
T*
[(448:)-599.6({)]TJ
T*
[(449:)-599.6(        if \(print\))]TJ
T*
[(450:)-599.6(        {)]TJ
T*
[(451:)-599.6(                output << "\\t<Term> -> <Factor> <TermPrime>" << std::endl;)]TJ
T*
[(452:)-599.6(        })]TJ
T*
(453:)Tj
T*
[(454:)-599.6(        Factor\(\);)]TJ
T*
[(455:)-599.6(        TermPrime\(\);)]TJ
T*
[(456:)-599.6(})]TJ
T*
(457:)Tj
T*
[(458:)-599.6(void SyntaxAnalyzer::Factor\(\))]TJ
T*
[(459:)-599.6({)]TJ
T*
[(460:)-599.6(        if \(print\))]TJ
T*
[(461:)-599.6(        {)]TJ
T*
[(462:)-599.6(                output << "\\t<Factor> -> - <Primary> | <Primary>" << std::endl;)]TJ
T*
[(463:)-599.6(        })]TJ
T*
(464:)Tj
T*
[(465:)-599.6(        if \(currentToken.lexeme == "-"\))]TJ
T*
[(466:)-599.6(        {)]TJ
T*
[(467:)-599.6(                getNextToken\(\);)]TJ
T*
[(468:)-599.6(        })]TJ
T*
(469:)Tj
T*
[(470:)-599.6(        Primary\(\);)]TJ
T*
[(471:)-599.6(})]TJ
T*
(472:)Tj
T*
[(473:)-599.6(void SyntaxAnalyzer::Primary\(\))]TJ
ET
endstream
endobj
19 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
21 0 obj
<<
/Length 5604
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(6)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(474:)-599.6({)]TJ
0 -1.1429 TD
[(475:)-599.6(        if \(print\))]TJ
T*
[(476:)-599.6(        {)]TJ
T*
[(477:)-599.6(                output << "\\t<Primary> -> <Identifier> | <Integer> | <Identifier> \( <IDs> \) | \( <Expression> \) | <Real> )]TJ
-1.3429 -1.1429 TD
(| true | false" << std::endl;)Tj
1.3429 -1.1429 TD
[(478:)-599.6(        })]TJ
T*
(479:)Tj
T*
[(480:)-599.6(        if \(currentToken.token == "Identifier"\))]TJ
T*
[(481:)-599.6(        {)]TJ
T*
[(482:)-599.6(                // If typestack is empty, we should be within a Condition.)]TJ
T*
[(483:)-599.6(                // Push the current Identifierís type onto the stack to compare with)]TJ
T*
[(484:)-599.6(                // the next one we see.)]TJ
T*
[(485:)-599.6(                if \(symbolTable.typestack_empty\(\)\))]TJ
T*
[(486:)-599.6(                {)]TJ
T*
[(487:)-599.6(                        symbolTable.push_typestack\(*savedType\);)]TJ
T*
[(488:)-599.6(                })]TJ
T*
[(489:)-599.6(                // If the Identifier doesnít have a type, it isnít in the symbol table.)]TJ
T*
[(490:)-599.6(                else if \(symbolTable.get_type\(currentToken\) == ""\))]TJ
T*
[(491:)-599.6(                {)]TJ
T*
[(492:)-599.6(                        error\(UNDECLARED_VARIABLE, currentToken.lineNumber, currentToken.lexeme\);)]TJ
T*
[(493:)-599.6(                })]TJ
T*
[(494:)-599.6(                // Error TYPE MISMATCH)]TJ
T*
[(495:)-599.6(                else if \(symbolTable.get_type\(currentToken\) != symbolTable.top_typestack\(\)\))]TJ
T*
[(496:)-599.6(                {)]TJ
T*
[(497:)-599.6(                        error\(TYPE_MISMATCH, currentToken.lineNumber, symbolTable.top_typestack\(\)\);)]TJ
T*
[(498:)-599.6(                })]TJ
T*
(499:)Tj
T*
[(500:)-599.6(                Identifier\(\);)]TJ
T*
[(501:)-599.6(                symbolTable.gen_instr\("PUSHM", symbolTable.lookup\(currentToken\)\);)]TJ
T*
(502:)Tj
T*
[(503:)-599.6(                getNextToken\(\);)]TJ
T*
[(504:)-599.6(                if \(currentToken.lexeme == "\("\))]TJ
T*
[(505:)-599.6(                {)]TJ
T*
[(506:)-599.6(                        getNextToken\(\);)]TJ
T*
[(507:)-599.6(                        IDs\(\);)]TJ
T*
(508:)Tj
T*
[(509:)-599.6(                        if \(currentToken.lexeme != "\)"\))]TJ
T*
[(510:)-599.6(                        {)]TJ
T*
[(511:)-599.6(                                throw SyntaxError\("Expected í\)í", currentToken.lineNumber\);)]TJ
T*
[(512:)-599.6(                        })]TJ
T*
(513:)Tj
T*
[(514:)-599.6(                        getNextToken\(\);)]TJ
T*
[(515:)-599.6(                })]TJ
T*
[(516:)-599.6(        })]TJ
T*
[(517:)-599.6(        else if \(currentToken.token == "Integer"\))]TJ
T*
[(518:)-599.6(        {)]TJ
T*
[(519:)-599.6(                // ERROR: TYPE MISMATCH)]TJ
T*
[(520:)-599.6(                if \(symbolTable.top_typestack\(\) != "int"\))]TJ
T*
[(521:)-599.6(                {)]TJ
T*
[(522:)-599.6(                        error\(TYPE_MISMATCH, currentToken.lineNumber, symbolTable.top_typestack\(\)\);)]TJ
T*
[(523:)-599.6(                })]TJ
T*
(524:)Tj
T*
[(525:)-599.6(                Integer\(\);)]TJ
T*
[(526:)-599.6(                symbolTable.gen_instr\("PUSHI", stoi\(currentToken.lexeme\)\);)]TJ
T*
[(527:)-599.6(                getNextToken\(\);)]TJ
T*
[(528:)-599.6(        })]TJ
T*
[(529:)-599.6(        else if \(currentToken.lexeme == "\("\))]TJ
T*
[(530:)-599.6(        {)]TJ
T*
[(531:)-599.6(                getNextToken\(\);)]TJ
T*
(532:)Tj
T*
[(533:)-599.6(                Expression\(\);)]TJ
T*
(534:)Tj
T*
[(535:)-599.6(                if \(currentToken.lexeme != "\)"\))]TJ
T*
[(536:)-599.6(                {)]TJ
T*
[(537:)-599.6(                        throw SyntaxError\("Expected í\)í", currentToken.lineNumber\);)]TJ
T*
[(538:)-599.6(                })]TJ
T*
[(539:)-599.6(                getNextToken\(\);)]TJ
T*
[(540:)-599.6(        })]TJ
T*
[(541:)-599.6(        else if \(currentToken.token == "Real"\))]TJ
T*
[(542:)-599.6(        {)]TJ
T*
[(543:)-599.6(                // Error TYPE MISMATCH)]TJ
T*
[(544:)-599.6(                if \(symbolTable.top_typestack\(\) != "real"\))]TJ
T*
[(545:)-599.6(                {)]TJ
T*
[(546:)-599.6(                        error\(TYPE_MISMATCH, currentToken.lineNumber, symbolTable.top_typestack\(\)\);)]TJ
T*
[(547:)-599.6(                })]TJ
T*
(548:)Tj
T*
[(549:)-599.6(                Real\(\);)]TJ
T*
[(550:)-599.6(                getNextToken\(\);)]TJ
T*
[(551:)-599.6(        })]TJ
T*
[(552:)-599.6(        else if \(currentToken.lexeme == "true"\))]TJ
T*
[(553:)-599.6(        {)]TJ
T*
[(554:)-599.6(                // Error TYPE MISMATCH)]TJ
T*
[(555:)-599.6(                if \(symbolTable.top_typestack\(\) != "boolean"\))]TJ
T*
[(556:)-599.6(                {)]TJ
T*
[(557:)-599.6(                        error\(TYPE_MISMATCH, currentToken.lineNumber, symbolTable.top_typestack\(\)\);)]TJ
T*
[(558:)-599.6(                })]TJ
T*
(559:)Tj
T*
[(560:)-599.6(                if \(print\) )]TJ
T*
[(561:)-599.6(                {)]TJ
T*
[(562:)-599.6(                        output << "\\ttrue" << std::endl;)]TJ
T*
[(563:)-599.6(                })]TJ
T*
(564:)Tj
T*
[(565:)-599.6(                symbolTable.gen_instr\("PUSHI", 1\);)]TJ
T*
[(566:)-599.6(                getNextToken\(\);)]TJ
T*
[(567:)-599.6(        })]TJ
T*
[(568:)-599.6(        else if \(currentToken.lexeme == "false"\))]TJ
ET
endstream
endobj
22 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
24 0 obj
<<
/Length 4320
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(7)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(569:)-599.6(        {)]TJ
0 -1.1429 TD
[(570:)-599.6(                // Error TYPE MISMATCH)]TJ
T*
[(571:)-599.6(                if \(symbolTable.top_typestack\(\) != "boolean"\))]TJ
T*
[(572:)-599.6(                {)]TJ
T*
[(573:)-599.6(                        error\(TYPE_MISMATCH, currentToken.lineNumber, symbolTable.top_typestack\(\)\);)]TJ
T*
[(574:)-599.6(                })]TJ
T*
(575:)Tj
T*
[(576:)-599.6(                if \(print\))]TJ
T*
[(577:)-599.6(                {)]TJ
T*
[(578:)-599.6(                        output << "\\tfalse" << std::endl;)]TJ
T*
[(579:)-599.6(                })]TJ
T*
[(580:)-599.6(                symbolTable.gen_instr\("PUSHI", 0\);)]TJ
T*
[(581:)-599.6(                getNextToken\(\);)]TJ
T*
[(582:)-599.6(        })]TJ
T*
[(583:)-599.6(})]TJ
T*
(584:)Tj
T*
[(585:)-599.6(void SyntaxAnalyzer::Integer\(\))]TJ
T*
[(586:)-599.6({)]TJ
T*
[(587:)-599.6(        if \(print\))]TJ
T*
[(588:)-599.6(        {)]TJ
T*
[(589:)-599.6(                output << "\\t<Integer>" << std::endl;)]TJ
T*
[(590:)-599.6(        })]TJ
T*
[(591:)-599.6(})]TJ
T*
(592:)Tj
T*
[(593:)-599.6(void SyntaxAnalyzer::Real\(\))]TJ
T*
[(594:)-599.6({)]TJ
T*
[(595:)-599.6(        if \(print\))]TJ
T*
[(596:)-599.6(        {)]TJ
T*
[(597:)-599.6(                output << "\\t<Real>" << std::endl;)]TJ
T*
[(598:)-599.6(        })]TJ
T*
[(599:)-599.6(})]TJ
T*
(600:)Tj
T*
[(601:)-599.6(void SyntaxAnalyzer::Return\(\))]TJ
T*
[(602:)-599.6({)]TJ
T*
[(603:)-599.6(        if \(print\))]TJ
T*
[(604:)-599.6(        {)]TJ
T*
[(605:)-599.6(                output << "\\t<Return> -> return; |  return <Expression>;" << std::endl;)]TJ
T*
[(606:)-599.6(        })]TJ
T*
(607:)Tj
T*
[(608:)-599.6(        if \(currentToken.lexeme != ";"\))]TJ
T*
[(609:)-599.6(        {)]TJ
T*
[(610:)-599.6(                Expression\(\);)]TJ
T*
[(611:)-599.6(        })]TJ
T*
[(612:)-599.6(        getNextToken\(\);)]TJ
T*
[(613:)-599.6(})]TJ
T*
(614:)Tj
T*
[(615:)-599.6(void SyntaxAnalyzer::If\(\))]TJ
T*
[(616:)-599.6({)]TJ
T*
[(617:)-599.6(        if \(print\))]TJ
T*
[(618:)-599.6(        {)]TJ
T*
[(619:)-599.6(                output << "\\t<If> -> if \( <Condition> \) <Statement> endif | if \( <Condition> \) <Statement> else <Stateme)]TJ
-1.3429 -1.1429 TD
(nt> endif" << std::endl;)Tj
1.3429 -1.1429 TD
[(620:)-599.6(        })]TJ
T*
(621:)Tj
T*
[(622:)-599.6(        if \(currentToken.lexeme != "\("\))]TJ
T*
[(623:)-599.6(        {)]TJ
T*
[(624:)-599.6(                throw SyntaxError\("Expected í\(í", currentToken.lineNumber\);)]TJ
T*
[(625:)-599.6(        })]TJ
T*
(626:)Tj
T*
[(627:)-599.6(        getNextToken\(\);)]TJ
T*
(628:)Tj
T*
[(629:)-599.6(        Condition\(\);)]TJ
T*
(630:)Tj
T*
[(631:)-599.6(        if \(currentToken.lexeme != "\)"\))]TJ
T*
[(632:)-599.6(        {)]TJ
T*
[(633:)-599.6(                throw SyntaxError\("Expected í\)í", currentToken.lineNumber\);)]TJ
T*
[(634:)-599.6(        })]TJ
T*
(635:)Tj
T*
[(636:)-599.6(        getNextToken\(\);)]TJ
T*
(637:)Tj
T*
[(638:)-599.6(        Statement\(\);)]TJ
T*
(639:)Tj
T*
[(640:)-599.6(        if \(currentToken.lexeme == "else"\))]TJ
T*
[(641:)-599.6(        {)]TJ
T*
[(642:)-599.6(                Statement\(\);)]TJ
T*
[(643:)-599.6(        })]TJ
T*
(644:)Tj
T*
[(645:)-599.6(        if \(currentToken.lexeme != "ifend"\))]TJ
T*
[(646:)-599.6(        {)]TJ
T*
[(647:)-599.6(                throw SyntaxError\("Expected íifendí keyword", currentToken.lineNumber\);)]TJ
T*
[(648:)-599.6(        })]TJ
T*
(649:)Tj
T*
[(650:)-599.6(        symbolTable.back_patch\(symbolTable.get_instr_address\(\)\);)]TJ
T*
[(651:)-599.6(        getNextToken\(\);)]TJ
T*
[(652:)-599.6(})]TJ
T*
(653:)Tj
T*
[(654:)-599.6(void SyntaxAnalyzer::Condition\(\))]TJ
T*
[(655:)-599.6({)]TJ
T*
[(656:)-599.6(        if \(print\))]TJ
T*
[(657:)-599.6(        {)]TJ
T*
[(658:)-599.6(                output << "\\t<Condition> -> <Expression>  <Relop>  <Expression>" << std::endl;)]TJ
T*
[(659:)-599.6(        })]TJ
T*
(660:)Tj
T*
[(661:)-599.6(        // Save variable type to push to typestack later)]TJ
T*
[(662:)-599.6(        savedType = new std::string\(symbolTable.get_type\(currentToken\)\);)]TJ
T*
(663:)Tj
ET
endstream
endobj
25 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
27 0 obj
<<
/Length 4438
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(8)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(664:)-599.6(        if \(*savedType == ""\))]TJ
0 -1.1429 TD
[(665:)-599.6(        {)]TJ
T*
[(666:)-599.6(                error\(UNDECLARED_VARIABLE, currentToken.lineNumber, currentToken.lexeme\);)]TJ
T*
[(667:)-599.6(        })]TJ
T*
(668:)Tj
T*
[(669:)-599.6(        Expression\(\);)]TJ
T*
(670:)Tj
T*
[(671:)-599.6(        Relop\(\);)]TJ
T*
(672:)Tj
T*
[(673:)-599.6(        getNextToken\(\);)]TJ
T*
[(674:)-599.6(        Expression\(\);)]TJ
T*
(675:)Tj
T*
[(676:)-599.6(        if \(*savedOp == "<"\))]TJ
T*
[(677:)-599.6(        {)]TJ
T*
[(678:)-599.6(                symbolTable.gen_instr\("LES", NIL\);)]TJ
T*
[(679:)-599.6(        })]TJ
T*
[(680:)-599.6(        else if \(*savedOp == ">"\))]TJ
T*
[(681:)-599.6(        {)]TJ
T*
[(682:)-599.6(                symbolTable.gen_instr\("GRT", NIL\);)]TJ
T*
[(683:)-599.6(        })]TJ
T*
[(684:)-599.6(        else if \(*savedOp == "=="\))]TJ
T*
[(685:)-599.6(        {)]TJ
T*
[(686:)-599.6(                symbolTable.gen_instr\("EQU", NIL\);)]TJ
T*
[(687:)-599.6(        })]TJ
T*
[(688:)-599.6(        else if \(*savedOp == "^="\))]TJ
T*
[(689:)-599.6(        {)]TJ
T*
[(690:)-599.6(                symbolTable.gen_instr\("NEQ", NIL\);)]TJ
T*
[(691:)-599.6(        })]TJ
T*
[(692:)-599.6(        else if \(*savedOp == "=>"\))]TJ
T*
[(693:)-599.6(        {)]TJ
T*
[(694:)-599.6(                symbolTable.gen_instr\("GEQ", NIL\);)]TJ
T*
[(695:)-599.6(        })]TJ
T*
[(696:)-599.6(        else if \(*savedOp == "=<"\))]TJ
T*
[(697:)-599.6(        {)]TJ
T*
[(698:)-599.6(                symbolTable.gen_instr\("LEQ", NIL\);)]TJ
T*
[(699:)-599.6(        })]TJ
T*
(700:)Tj
T*
[(701:)-599.6(        symbolTable.push_jumpstack\(symbolTable.get_instr_address\(\)\);)]TJ
T*
[(702:)-599.6(        symbolTable.gen_instr\("JUMPZ", NIL\);)]TJ
T*
[(703:)-599.6(})]TJ
T*
(704:)Tj
T*
[(705:)-599.6(void SyntaxAnalyzer::Relop\(\))]TJ
T*
[(706:)-599.6({)]TJ
T*
[(707:)-599.6(        if \(currentToken.lexeme != "==" && currentToken.lexeme != "^=" && currentToken.lexeme != ">" && currentToken.lex)]TJ
-1.3429 -1.1429 TD
(eme != "<" && currentToken.lexeme != "=>" && currentToken.lexeme != "=<"\))Tj
1.3429 -1.1429 TD
[(708:)-599.6(        {)]TJ
T*
[(709:)-599.6(                throw SyntaxError\("Expected relational operator", currentToken.lineNumber\);)]TJ
T*
[(710:)-599.6(        })]TJ
T*
(711:)Tj
T*
[(712:)-599.6(        this->savedOp = new std::string\(currentToken.lexeme\);)]TJ
T*
(713:)Tj
T*
[(714:)-599.6(        if \(print\))]TJ
T*
[(715:)-599.6(        {)]TJ
T*
[(716:)-599.6(                output << "\\t<Relop> -> " << currentToken.lexeme << std::endl;)]TJ
T*
[(717:)-599.6(        })]TJ
T*
[(718:)-599.6(})]TJ
T*
(719:)Tj
T*
[(720:)-599.6(void SyntaxAnalyzer::Empty\(\))]TJ
T*
[(721:)-599.6({)]TJ
T*
[(722:)-599.6(        if \(print\))]TJ
T*
[(723:)-599.6(        {)]TJ
T*
[(724:)-599.6(                output << "\\t<Empty> -> Œµ" << std::endl;)]TJ
T*
[(725:)-599.6(        })]TJ
T*
[(726:)-599.6(})]TJ
T*
(727:)Tj
T*
[(728:)-599.6(void SyntaxAnalyzer::Body\(\))]TJ
T*
[(729:)-599.6({)]TJ
T*
[(730:)-599.6(        if \(print\))]TJ
T*
[(731:)-599.6(        {)]TJ
T*
[(732:)-599.6(                output << "\\t<Body> -> { <Statement List> }" << std::endl;)]TJ
T*
[(733:)-599.6(        })]TJ
T*
(734:)Tj
T*
[(735:)-599.6(        if \(currentToken.lexeme != "{"\))]TJ
T*
[(736:)-599.6(        {)]TJ
T*
[(737:)-599.6(                throw SyntaxError\("Expected í{í", currentToken.lineNumber\);)]TJ
T*
[(738:)-599.6(        })]TJ
T*
(739:)Tj
T*
[(740:)-599.6(        getNextToken\(\);)]TJ
T*
(741:)Tj
T*
[(742:)-599.6(        StatementList\(\);)]TJ
T*
(743:)Tj
T*
[(744:)-599.6(        if \(currentToken.lexeme != "}"\))]TJ
T*
[(745:)-599.6(        {)]TJ
T*
[(746:)-599.6(                throw SyntaxError\("Expected í}í", currentToken.lineNumber\);)]TJ
T*
[(747:)-599.6(        })]TJ
T*
(748:)Tj
T*
[(749:)-599.6(        getNextToken\(\);)]TJ
T*
[(750:)-599.6(})]TJ
T*
(751:)Tj
T*
[(752:)-599.6(void SyntaxAnalyzer::FunctionDefinitions\(\))]TJ
T*
[(753:)-599.6({)]TJ
T*
[(754:)-599.6(        if \(print\))]TJ
T*
[(755:)-599.6(        {)]TJ
T*
[(756:)-599.6(                output << "\\t<Function Definitions> -> <Function> | <Function> <Function Definitions>" << std::endl;)]TJ
T*
[(757:)-599.6(        })]TJ
T*
(758:)Tj
ET
endstream
endobj
28 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
30 0 obj
<<
/Length 4332
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(9)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(759:)-599.6(        Function\(\);)]TJ
0 -1.1429 TD
(760:)Tj
T*
[(761:)-599.6(        if \(currentToken.lexeme == "function"\))]TJ
T*
[(762:)-599.6(        {)]TJ
T*
[(763:)-599.6(                getNextToken\(\);)]TJ
T*
[(764:)-599.6(                FunctionDefinitions\(\);)]TJ
T*
[(765:)-599.6(        })]TJ
T*
[(766:)-599.6(})]TJ
T*
(767:)Tj
T*
[(768:)-599.6(void SyntaxAnalyzer::Print\(\))]TJ
T*
[(769:)-599.6({)]TJ
T*
[(770:)-599.6(        if \(print\))]TJ
T*
[(771:)-599.6(        {)]TJ
T*
[(772:)-599.6(                output << "\\t<Print> -> put \( <Expression> \);" << std::endl;)]TJ
T*
[(773:)-599.6(        })]TJ
T*
(774:)Tj
T*
[(775:)-599.6(        if \(currentToken.lexeme != "\("\))]TJ
T*
[(776:)-599.6(        {)]TJ
T*
[(777:)-599.6(                throw SyntaxError\("Expected í\(í", currentToken.lineNumber\);)]TJ
T*
[(778:)-599.6(        })]TJ
T*
(779:)Tj
T*
[(780:)-599.6(        getNextToken\(\);)]TJ
T*
[(781:)-599.6(        Expression\(\);)]TJ
T*
(782:)Tj
T*
[(783:)-599.6(        if \(currentToken.lexeme != "\)"\))]TJ
T*
[(784:)-599.6(        {)]TJ
T*
[(785:)-599.6(                throw SyntaxError\("Expected í\)í", currentToken.lineNumber\);)]TJ
T*
[(786:)-599.6(        })]TJ
T*
[(787:)-599.6(        getNextToken\(\);)]TJ
T*
(788:)Tj
T*
[(789:)-599.6(        if \(currentToken.lexeme != ";"\))]TJ
T*
[(790:)-599.6(        {)]TJ
T*
[(791:)-599.6(                throw SyntaxError\("Expected í;í", currentToken.lineNumber\);)]TJ
T*
[(792:)-599.6(        })]TJ
T*
(793:)Tj
T*
[(794:)-599.6(        symbolTable.gen_instr\("STDOUT", NIL\);)]TJ
T*
(795:)Tj
T*
[(796:)-599.6(        getNextToken\(\);)]TJ
T*
[(797:)-599.6(})]TJ
T*
(798:)Tj
T*
[(799:)-599.6(void SyntaxAnalyzer::Scan\(\))]TJ
T*
[(800:)-599.6({)]TJ
T*
[(801:)-599.6(        if \(print\))]TJ
T*
[(802:)-599.6(        {)]TJ
T*
[(803:)-599.6(                output << "\\t<Scan> -> get \( <IDs> \);" << std::endl;)]TJ
T*
[(804:)-599.6(        })]TJ
T*
(805:)Tj
T*
[(806:)-599.6(        if \(currentToken.lexeme != "\("\))]TJ
T*
[(807:)-599.6(        {)]TJ
T*
[(808:)-599.6(                throw SyntaxError\("Expected í\(í", currentToken.lineNumber\);)]TJ
T*
[(809:)-599.6(        })]TJ
T*
(810:)Tj
T*
[(811:)-599.6(        getNextToken\(\);)]TJ
T*
(812:)Tj
T*
[(813:)-599.6(        symbolTable.gen_instr\("STDIN", NIL\);)]TJ
T*
[(814:)-599.6(        int addr = symbolTable.get_address\(currentToken\);)]TJ
T*
[(815:)-599.6(        symbolTable.gen_instr\("POPM", addr\);)]TJ
T*
(816:)Tj
T*
[(817:)-599.6(        IDs\(\);)]TJ
T*
(818:)Tj
T*
[(819:)-599.6(        if \(currentToken.lexeme != "\)"\))]TJ
T*
[(820:)-599.6(        {)]TJ
T*
[(821:)-599.6(                throw SyntaxError\("Expected í\)í", currentToken.lineNumber\);)]TJ
T*
[(822:)-599.6(        })]TJ
T*
(823:)Tj
T*
[(824:)-599.6(        getNextToken\(\);)]TJ
T*
[(825:)-599.6(        if \(currentToken.lexeme != ";"\))]TJ
T*
[(826:)-599.6(        {)]TJ
T*
[(827:)-599.6(                throw SyntaxError\("Expected í;í", currentToken.lineNumber\);)]TJ
T*
[(828:)-599.6(        })]TJ
T*
(829:)Tj
T*
[(830:)-599.6(        getNextToken\(\);)]TJ
T*
[(831:)-599.6(})]TJ
T*
(832:)Tj
T*
[(833:)-599.6(void SyntaxAnalyzer::TermPrime\(\))]TJ
T*
[(834:)-599.6({)]TJ
T*
[(835:)-599.6(        if \(print\))]TJ
T*
[(836:)-599.6(        {)]TJ
T*
[(837:)-599.6(                output << "\\t<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>" << std::endl;)]TJ
T*
[(838:)-599.6(        })]TJ
T*
(839:)Tj
T*
[(840:)-599.6(        if \(currentToken.lexeme == "*" | currentToken.lexeme == "/"\))]TJ
T*
[(841:)-599.6(        {)]TJ
T*
[(842:)-599.6(                std::string op = currentToken.lexeme;)]TJ
T*
(843:)Tj
T*
[(844:)-599.6(                getNextToken\(\);)]TJ
T*
(845:)Tj
T*
[(846:)-599.6(                Factor\(\);)]TJ
T*
(847:)Tj
T*
[(848:)-599.6(                if \(op == "*"\))]TJ
T*
[(849:)-599.6(                {)]TJ
T*
[(850:)-599.6(                        symbolTable.gen_instr\("MUL", NIL\);)]TJ
T*
[(851:)-599.6(                })]TJ
T*
[(852:)-599.6(                else)]TJ
T*
[(853:)-599.6(                {)]TJ
T*
[(854:)-599.6(                        symbolTable.gen_instr\("DIV", NIL\);)]TJ
ET
endstream
endobj
31 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
33 0 obj
<<
/Length 4427
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(10)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(855:)-599.6(                })]TJ
0 -1.1429 TD
(856:)Tj
T*
[(857:)-599.6(                TermPrime\(\);)]TJ
T*
[(858:)-599.6(        })]TJ
T*
[(859:)-599.6(})]TJ
T*
(860:)Tj
T*
[(861:)-599.6(/**)]TJ
T*
[(862:)-599.6( * Attempt to syntactically analyze a list of)]TJ
T*
[(863:)-599.6( * Lexer tokens)]TJ
T*
[(864:)-599.6( */)]TJ
T*
[(865:)-599.6(void SyntaxAnalyzer::Analyze\(\))]TJ
T*
[(866:)-599.6({)]TJ
T*
[(867:)-599.6(        Rat18F\(\);)]TJ
T*
[(868:)-599.6(        output << "Syntax Analysis Successful." << std::endl << std::endl;)]TJ
T*
[(869:)-599.6(})]TJ
T*
(870:)Tj
T*
[(871:)-599.6(void SyntaxAnalyzer::OptParameterList\(\))]TJ
T*
[(872:)-599.6({)]TJ
T*
[(873:)-599.6(        if \(print\))]TJ
T*
[(874:)-599.6(        {)]TJ
T*
[(875:)-599.6(                output << "\\t<Opt Parameter List> -> <Parameter List> | <Empty>" << std::endl;)]TJ
T*
[(876:)-599.6(        })]TJ
T*
(877:)Tj
T*
[(878:)-599.6(        if \(currentToken.lexeme == "\)"\))]TJ
T*
[(879:)-599.6(        {)]TJ
T*
[(880:)-599.6(                Empty\(\);)]TJ
T*
[(881:)-599.6(        })]TJ
T*
[(882:)-599.6(        else if \(currentToken.token == "Identifier"\))]TJ
T*
[(883:)-599.6(        {)]TJ
T*
[(884:)-599.6(                ParameterList\(\);)]TJ
T*
[(885:)-599.6(        })]TJ
T*
[(886:)-599.6(        else)]TJ
T*
[(887:)-599.6(        {)]TJ
T*
[(888:)-599.6(                throw SyntaxError\("Expected í\)í or identifier", currentToken.lineNumber\);)]TJ
T*
[(889:)-599.6(        })]TJ
T*
[(890:)-599.6(})]TJ
T*
(891:)Tj
T*
[(892:)-599.6(void SyntaxAnalyzer::ParameterList\(\))]TJ
T*
[(893:)-599.6({)]TJ
T*
[(894:)-599.6(        if \(print\))]TJ
T*
[(895:)-599.6(        {)]TJ
T*
[(896:)-599.6(                output << "\\t<Parameter List> -> <Parameter> | <Parameter> , <Parameter List>" << std::endl;)]TJ
T*
[(897:)-599.6(        })]TJ
T*
(898:)Tj
T*
[(899:)-599.6(        Parameter\(\);)]TJ
T*
(900:)Tj
T*
[(901:)-599.6(        getNextToken\(\);)]TJ
T*
(902:)Tj
T*
[(903:)-599.6(        if \(currentToken.lexeme == ","\))]TJ
T*
[(904:)-599.6(        {)]TJ
T*
[(905:)-599.6(                getNextToken\(\);)]TJ
T*
[(906:)-599.6(                ParameterList\(\);)]TJ
T*
[(907:)-599.6(        })]TJ
T*
[(908:)-599.6(})]TJ
T*
(909:)Tj
T*
[(910:)-599.6(void SyntaxAnalyzer::While\(\))]TJ
T*
[(911:)-599.6({)]TJ
T*
[(912:)-599.6(        if \(print\))]TJ
T*
[(913:)-599.6(        {)]TJ
T*
[(914:)-599.6(                output << "\\t<While> -> while \( <Condition> \)  <Statement>" << std::endl;)]TJ
T*
[(915:)-599.6(        })]TJ
T*
(916:)Tj
T*
[(917:)-599.6(        int addr = symbolTable.get_instr_address\(\);)]TJ
T*
[(918:)-599.6(        symbolTable.gen_instr\("LABEL", NIL\);)]TJ
T*
(919:)Tj
T*
[(920:)-599.6(        if \(currentToken.lexeme != "\("\))]TJ
T*
[(921:)-599.6(        {)]TJ
T*
[(922:)-599.6(                throw SyntaxError\("Expected í\(í", currentToken.lineNumber\);)]TJ
T*
[(923:)-599.6(        })]TJ
T*
[(924:)-599.6(        getNextToken\(\);)]TJ
T*
(925:)Tj
T*
[(926:)-599.6(        Condition\(\);)]TJ
T*
(927:)Tj
T*
[(928:)-599.6(        if \(currentToken.lexeme != "\)"\))]TJ
T*
[(929:)-599.6(        {)]TJ
T*
[(930:)-599.6(                throw SyntaxError\("Expected í\)í", currentToken.lineNumber\);)]TJ
T*
[(931:)-599.6(        })]TJ
T*
[(932:)-599.6(        getNextToken\(\);)]TJ
T*
[(933:)-599.6(        Statement\(\);)]TJ
T*
(934:)Tj
T*
[(935:)-599.6(        if \(currentToken.lexeme != "whileend"\))]TJ
T*
[(936:)-599.6(        {)]TJ
T*
[(937:)-599.6(                throw SyntaxError\("Expected íwhileendí keyword", currentToken.lineNumber\);)]TJ
T*
[(938:)-599.6(        })]TJ
T*
[(939:)-599.6(        symbolTable.gen_instr\("JUMP", addr\);)]TJ
T*
[(940:)-599.6(        symbolTable.back_patch\(symbolTable.get_instr_address\(\)\);)]TJ
T*
(941:)Tj
T*
[(942:)-599.6(        getNextToken\(\);)]TJ
T*
[(943:)-599.6(})]TJ
T*
(944:)Tj
T*
[(945:)-599.6(void SyntaxAnalyzer::printCurrentToken\(\))]TJ
T*
[(946:)-599.6({)]TJ
T*
[(947:)-599.6(        output << std::left << std::endl)]TJ
T*
[(948:)-599.6(                << std::setw\(8\) << "Token:" << std::setw\(16\) << currentToken.token << std::setw\(8\) << "Lexeme:" << curre)]TJ
-1.3429 -1.1429 TD
(ntToken.lexeme << std::endl)Tj
1.3429 -1.1429 TD
[(949:)-599.6(                << std::endl;)]TJ
ET
endstream
endobj
34 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
36 0 obj
<<
/Length 1928
>>
stream
BT
/TT2 1 Tf
10 0 0 10 29 806.3333 Tm
0 g
/GS1 gs
0 Tc
0 Tw
[(SyntaxAnalyzer.cpp)-4500(Mon Dec 10 17:16:51 2018)-4500(11)]TJ
/TT4 1 Tf
7 0 0 7 38.4 793 Tm
[(950:)-599.6(})]TJ
0 -1.1429 TD
(951:)Tj
T*
[(952:)-599.6(SyntaxError::SyntaxError\(std::string message, int lineNumber\))]TJ
T*
[(953:)-599.6({)]TJ
T*
[(954:)-599.6(        this->message = message;)]TJ
T*
[(955:)-599.6(        this->lineNumber = lineNumber;)]TJ
T*
[(956:)-599.6(})]TJ
T*
(957:)Tj
T*
[(958:)-599.6(SyntaxError::òSyntaxError\(\) {})]TJ
T*
(959:)Tj
T*
[(960:)-599.6(std::string SyntaxError::getMessage\(\) const)]TJ
T*
[(961:)-599.6({)]TJ
T*
[(962:)-599.6(        return \(this->message + " Line: " + std::to_string\(this->lineNumber\)\);)]TJ
T*
[(963:)-599.6(})]TJ
T*
(964:)Tj
T*
[(965:)-599.6(std::string SyntaxAnalyzer::PrintAll\(\))]TJ
T*
[(966:)-599.6({)]TJ
T*
[(967:)-599.6(        std::ostringstream out;)]TJ
T*
[(968:)-599.6(        out << this->symbolTable.list\(\);)]TJ
T*
[(969:)-599.6(        out << std::endl;)]TJ
T*
[(970:)-599.6(        out << this->symbolTable.list_instr\(\);)]TJ
T*
[(971:)-599.6(        if \(this->errCount > 0\))]TJ
T*
[(972:)-599.6(        {)]TJ
T*
[(973:)-599.6(                out << std::endl;)]TJ
T*
[(974:)-599.6(                out << errCount << " ERROR" << \(\(errCount > 1\) ? "S" : ""\);)]TJ
T*
[(975:)-599.6(                out << " FOUND" << std::endl;)]TJ
T*
[(976:)-599.6(                out << std::setfill\(í-í\) << std::setw\(15\) << í-í << std::setfill\(í í\) << std::endl;)]TJ
T*
[(977:)-599.6(                out << err.str\(\);)]TJ
T*
[(978:)-599.6(        })]TJ
T*
[(979:)-599.6(        else)]TJ
T*
[(980:)-599.6(        {)]TJ
T*
[(981:)-599.6(                out << std::endl << "3AC Code Generated Successfully!" << std::endl;)]TJ
T*
[(982:)-599.6(        })]TJ
T*
[(983:)-599.6(        out << std::endl;)]TJ
T*
(984:)Tj
T*
[(985:)-599.6(        return out.str\(\);)]TJ
T*
[(986:)-599.6(})]TJ
ET
endstream
endobj
37 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
>>
/ExtGState <<
/GS1 6 0 R
>>
>>
endobj
6 0 obj
<<
/Type /ExtGState
/SA false
/SM 0.02
/OP false
/op false
/OPM 1
/BG2 /Default
/UCR2 /Default
/HT /Default
/TR2 /Default
>>
endobj
40 0 obj
<<
/Type /FontDescriptor
/Ascent 753
/CapHeight 562
/Descent -246
/Flags 262179
/FontBBox [-113 -250 749 801]
/FontName /Courier-Bold
/ItalicAngle 0
/StemV 133
/XHeight 439
/StemH 84
>>
endobj
41 0 obj
<<
/Type /FontDescriptor
/Ascent 753
/CapHeight 562
/Descent -246
/Flags 35
/FontBBox [-28 -250 628 805]
/FontName /Courier
/ItalicAngle 0
/StemV 51
/XHeight 426
/StemH 51
>>
endobj
4 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 122
/Widths [600 0 0 0 0 0 0 0 0 0 0 0 0 0 600 0 
600 600 600 600 600 600 600 600 600 600 600 0 0 0 0 0 
0 600 0 0 600 0 0 0 0 0 0 0 0 600 0 0 
0 0 0 600 0 0 0 0 0 0 0 0 0 0 0 0 
0 600 0 600 0 600 0 0 0 0 0 0 600 0 600 600 
600 0 600 0 600 0 0 0 600 600 600 ]
/Encoding /WinAnsiEncoding
/BaseFont /Courier-Bold
/FontDescriptor 40 0 R
>>
endobj
5 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 206
/Widths [600 600 600 600 600 0 600 0 600 600 600 600 600 600 600 600 
600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 
0 600 600 600 600 600 600 600 600 600 600 0 600 600 600 600 
600 600 600 600 600 600 600 600 0 600 600 600 600 600 600 600 
0 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 
600 0 600 600 600 600 600 600 600 600 600 600 600 600 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 600 0 0 0 0 0 600 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 576 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 600 ]
/Encoding /WinAnsiEncoding
/BaseFont /Courier
/FontDescriptor 41 0 R
>>
endobj
1 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 3 0 R
/Contents 2 0 R
>>
endobj
8 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 10 0 R
/Contents 9 0 R
>>
endobj
11 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 13 0 R
/Contents 12 0 R
>>
endobj
14 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 16 0 R
/Contents 15 0 R
>>
endobj
17 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 19 0 R
/Contents 18 0 R
>>
endobj
20 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 22 0 R
/Contents 21 0 R
>>
endobj
23 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 25 0 R
/Contents 24 0 R
>>
endobj
26 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 28 0 R
/Contents 27 0 R
>>
endobj
29 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 31 0 R
/Contents 30 0 R
>>
endobj
32 0 obj
<<
/Type /Page
/Parent 7 0 R
/Resources 34 0 R
/Contents 33 0 R
>>
endobj
35 0 obj
<<
/Type /Page
/Parent 39 0 R
/Resources 37 0 R
/Contents 36 0 R
>>
endobj
42 0 obj
<<
/S /D
>>
endobj
43 0 obj
<<
/Nums [0 42 0 R ]
>>
endobj
7 0 obj
<<
/Type /Pages
/Kids [1 0 R 8 0 R 11 0 R 14 0 R 17 0 R 20 0 R 23 0 R 26 0 R 29 0 R 32 0 R]
/Count 10
/Parent 38 0 R
>>
endobj
39 0 obj
<<
/Type /Pages
/Kids [35 0 R]
/Count 1
/Parent 38 0 R
>>
endobj
38 0 obj
<<
/Type /Pages
/Kids [7 0 R 39 0 R ]
/Count 11
/MediaBox [0 0 595 842]
>>
endobj
44 0 obj
<<
/CreationDate (D:20181210171904-08'00')
/ModDate (D:20181210171904-08'00')
/Producer (Apple pstopdf)
>>
endobj
45 0 obj
<<
/Type /Catalog
/Pages 38 0 R
/PageLabels 43 0 R
>>
endobj
xref
0 46
0000000000 65535 f 
0000050313 00000 n 
0000000016 00000 n 
0000004563 00000 n 
0000049201 00000 n 
0000049611 00000 n 
0000048668 00000 n 
0000051290 00000 n 
0000050393 00000 n 
0000004669 00000 n 
0000008953 00000 n 
0000050474 00000 n 
0000009060 00000 n 
0000013484 00000 n 
0000050557 00000 n 
0000013591 00000 n 
0000018273 00000 n 
0000050640 00000 n 
0000018380 00000 n 
0000022552 00000 n 
0000050723 00000 n 
0000022659 00000 n 
0000028316 00000 n 
0000050806 00000 n 
0000028423 00000 n 
0000032796 00000 n 
0000050889 00000 n 
0000032903 00000 n 
0000037394 00000 n 
0000050972 00000 n 
0000037501 00000 n 
0000041886 00000 n 
0000051055 00000 n 
0000041993 00000 n 
0000046473 00000 n 
0000051138 00000 n 
0000046580 00000 n 
0000048561 00000 n 
0000051499 00000 n 
0000051425 00000 n 
0000048808 00000 n 
0000049010 00000 n 
0000051222 00000 n 
0000051250 00000 n 
0000051590 00000 n 
0000051713 00000 n 
trailer
<<
/Size 46
/Root 45 0 R
/Info 44 0 R
/ID [<cd314d4d13f0cc6f8aff2ddfcfacd63c><cd314d4d13f0cc6f8aff2ddfcfacd63c>]
>>
startxref
51783
%%EOF
