
RUNNING TEST CASE FILE "testfile.txt"


Token:  Keyword         Lexeme: function

	<Rat18F> -> <Opt Function Definitions> $$ <Opt Declaration List> <Statement List>
	<Opt Function Definitions> ->  <Function Definitions> | <Empty>

Token:  Identifier      Lexeme: convert1x

	<Function Definitions> -> <Function> | <Function> <Function Definitions>
	<Function> ->  function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
	<Identifier>

Token:  Separator       Lexeme: (


Token:  Identifier      Lexeme: fahr

	<Opt Parameter List> -> <Parameter List> | <Empty>
	<Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
	<Parameter> -> <IDs> : <Qualifier>
	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: :


Token:  Keyword         Lexeme: int

	<Qualifier> ->  int | boolean | real

Token:  Separator       Lexeme: )


Token:  Separator       Lexeme: {

	<Opt Declaration List> -> <Declaration List> | <Empty>
	<Empty> -> ε
	<Body> -> { <Statement List> }

Token:  Keyword         Lexeme: return

	<Statement List> -> <Statement> | <Statement> <Statement List>
	<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token:  Integer         Lexeme: 5

	<Return> -> return; |  return <Expression>;
	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Integer>

Token:  Operator        Lexeme: *

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>

Token:  Separator       Lexeme: (

	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false

Token:  Identifier      Lexeme: fahr

	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Identifier>

Token:  Operator        Lexeme: -

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>

Token:  Integer         Lexeme: 32

	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Integer>

Token:  Separator       Lexeme: )

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> ε

Token:  Operator        Lexeme: /

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>

Token:  Integer         Lexeme: 9

	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Integer>

Token:  Separator       Lexeme: ;

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> ε

Token:  Separator       Lexeme: }


Token:  Separator       Lexeme: $$


Token:  Keyword         Lexeme: int

	<Opt Declaration List> -> <Declaration List> | <Empty>
	<Declaration List> -> <Declaration>; | <Declaration>; <Declaration List>
	<Declaration> -> <Qualifier> <IDs>
	<Qualifier> ->  int | boolean | real

Token:  Identifier      Lexeme: low

	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: ,


Token:  Identifier      Lexeme: high

	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: ,


Token:  Identifier      Lexeme: step

	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: ;


Token:  Keyword         Lexeme: get

	<Statement List> -> <Statement> | <Statement> <Statement List>
	<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token:  Separator       Lexeme: (

	<Scan> -> get ( <IDs> );

Token:  Identifier      Lexeme: low

	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: ,


Token:  Identifier      Lexeme: high

	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: ,


Token:  Identifier      Lexeme: step

	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: )


Token:  Separator       Lexeme: ;


Token:  Keyword         Lexeme: while

	<Statement List> -> <Statement> | <Statement> <Statement List>
	<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token:  Separator       Lexeme: (

	<While> -> while ( <Condition> )  <Statement>

Token:  Identifier      Lexeme: low

	<Condition> -> <Expression>  <Relop>  <Expression>
	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Identifier>

Token:  Operator        Lexeme: <

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> ε
	<Relop> -> <

Token:  Identifier      Lexeme: high

	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Identifier>

Token:  Separator       Lexeme: )

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> ε

Token:  Separator       Lexeme: {

	<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token:  Keyword         Lexeme: put

	<Compound> -> { <Statement List> }
	<Statement List> -> <Statement> | <Statement> <Statement List>
	<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token:  Separator       Lexeme: (

	<Print> -> put ( <Expression> );

Token:  Identifier      Lexeme: low

	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Identifier>

Token:  Separator       Lexeme: )

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> ε

Token:  Separator       Lexeme: ;


Token:  Keyword         Lexeme: put

	<Statement List> -> <Statement> | <Statement> <Statement List>
	<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>

Token:  Separator       Lexeme: (

	<Print> -> put ( <Expression> );

Token:  Identifier      Lexeme: convert1x

	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Identifier>

Token:  Separator       Lexeme: (


Token:  Identifier      Lexeme: low

	<IDs> -> <Identifier> | <Identifier>, <IDs>
	<Identifier>

Token:  Separator       Lexeme: )


Token:  Separator       Lexeme: )

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> ε

Token:  Separator       Lexeme: ;


Token:  Identifier      Lexeme: low

	<Statement List> -> <Statement> | <Statement> <Statement List>
	<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
	<Assign> -> <Identifier> = <Expression>;
	<Identifier>

Token:  Operator        Lexeme: =


Token:  Identifier      Lexeme: low

	<Expression> -> <Term> <ExpressionPrime>
	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Identifier>

Token:  Operator        Lexeme: +

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>

Token:  Identifier      Lexeme: step

	<Term> -> <Factor> <TermPrime>
	<Factor> -> - <Primary> | <Primary>
	<Primary> -> <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
	<Identifier>

Token:  Separator       Lexeme: ;

	<TermPrime> -> * <Factor> <TermPrime> | / <Factor> <TermPrime> | <Empty>
	<ExpressionPrime> -> + <Term> <ExpressionPrime> | - <Term> <ExpressionPrime> | <Empty>
	<Empty> -> ε

Token:  Separator       Lexeme: }


Token:  Keyword         Lexeme: whileend


Token:  Separator       Lexeme: $$

Syntax Analysis Successful.

EXECUTION HAS COMPLETED.
Press enter to continue. . .
